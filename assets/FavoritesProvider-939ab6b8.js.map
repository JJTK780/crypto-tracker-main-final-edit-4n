{"version":3,"file":"FavoritesProvider-939ab6b8.js","sources":["../../src/context/FavoritesProvider.tsx"],"sourcesContent":["import {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  ReactNode,\r\n} from \"react\";\r\nimport { useAuth } from \"@clerk/clerk-react\";\r\nimport { Coin } from \"../types/CoinTypes\";\r\n\r\ninterface FavoritesContextType {\r\n  favorites: Coin[];\r\n  addFavorite: (coin: Coin) => void;\r\n  removeFavorite: (coinId: string) => void;\r\n  isFavorite: (coinId: string) => boolean;\r\n}\r\n\r\nconst FavoritesContext = createContext<FavoritesContextType>(\r\n  {} as FavoritesContextType\r\n);\r\n\r\nexport function useFavorites() {\r\n  return useContext(FavoritesContext);\r\n}\r\n\r\nexport function FavoritesProvider({ children }: { children: ReactNode }) {\r\n  const [favorites, setFavorites] = useState<Coin[]>([]);\r\n  const { userId, isSignedIn } = useAuth();\r\n\r\n  // Load favorites when user signs in\r\n  useEffect(() => {\r\n    if (isSignedIn && userId) {\r\n      const stored = localStorage.getItem(`favorites_${userId}`);\r\n      if (stored) {\r\n        try {\r\n          const parsed = JSON.parse(stored);\r\n          setFavorites(parsed);\r\n        } catch (e) {\r\n          console.error(\"Error loading favorites:\", e);\r\n          localStorage.removeItem(`favorites_${userId}`);\r\n        }\r\n      }\r\n    } else {\r\n      setFavorites([]);\r\n    }\r\n  }, [userId, isSignedIn]);\r\n\r\n  // Save favorites when they change\r\n  useEffect(() => {\r\n    if (isSignedIn && userId && favorites.length > 0) {\r\n      localStorage.setItem(`favorites_${userId}`, JSON.stringify(favorites));\r\n    }\r\n  }, [favorites, userId, isSignedIn]);\r\n\r\n  const addFavorite = (coin: Coin) => {\r\n    if (!isSignedIn) return;\r\n    setFavorites((prev) => {\r\n      if (!prev.some((fav) => fav.id === coin.id)) {\r\n        return [...prev, coin];\r\n      }\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  const removeFavorite = (coinId: string) => {\r\n    if (!isSignedIn) return;\r\n    setFavorites((prev) => prev.filter((coin) => coin.id !== coinId));\r\n  };\r\n\r\n  const isFavorite = (coinId: string) => {\r\n    return favorites.some((coin) => coin.id === coinId);\r\n  };\r\n\r\n  return (\r\n    <FavoritesContext.Provider\r\n      value={{ favorites, addFavorite, removeFavorite, isFavorite }}\r\n    >\r\n      {children}\r\n    </FavoritesContext.Provider>\r\n  );\r\n}\r\n"],"names":["FavoritesContext","createContext","useFavorites","useContext","FavoritesProvider","children","favorites","setFavorites","useState","userId","isSignedIn","useAuth","useEffect","stored","parsed","addFavorite","coin","prev","fav","removeFavorite","coinId","isFavorite","jsx"],"mappings":"iHAiBA,MAAMA,EAAmBC,EAAA,cACvB,CAAC,CACH,EAEO,SAASC,GAAe,CAC7B,OAAOC,EAAAA,WAAWH,CAAgB,CACpC,CAEgB,SAAAI,EAAkB,CAAE,SAAAC,GAAqC,CACvE,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAA,SAAiB,CAAE,CAAA,EAC/C,CAAE,OAAAC,EAAQ,WAAAC,CAAW,EAAIC,EAAQ,EAGvCC,EAAAA,UAAU,IAAM,CACd,GAAIF,GAAcD,EAAQ,CACxB,MAAMI,EAAS,aAAa,QAAQ,aAAaJ,CAAM,EAAE,EACzD,GAAII,EACE,GAAA,CACI,MAAAC,EAAS,KAAK,MAAMD,CAAM,EAChCN,EAAaO,CAAM,QACZ,EAAG,CACF,QAAA,MAAM,2BAA4B,CAAC,EAC9B,aAAA,WAAW,aAAaL,CAAM,EAAE,CAC/C,CACF,MAEAF,EAAa,CAAE,CAAA,CACjB,EACC,CAACE,EAAQC,CAAU,CAAC,EAGvBE,EAAAA,UAAU,IAAM,CACVF,GAAcD,GAAUH,EAAU,OAAS,GAC7C,aAAa,QAAQ,aAAaG,CAAM,GAAI,KAAK,UAAUH,CAAS,CAAC,CAEtE,EAAA,CAACA,EAAWG,EAAQC,CAAU,CAAC,EAE5B,MAAAK,EAAeC,GAAe,CAC7BN,GACLH,EAAcU,GACPA,EAAK,KAAMC,GAAQA,EAAI,KAAOF,EAAK,EAAE,EAGnCC,EAFE,CAAC,GAAGA,EAAMD,CAAI,CAGxB,CAAA,EAGGG,EAAkBC,GAAmB,CACpCV,GACQH,EAACU,GAASA,EAAK,OAAQD,GAASA,EAAK,KAAOI,CAAM,CAAC,CAAA,EAG5DC,EAAcD,GACXd,EAAU,KAAMU,GAASA,EAAK,KAAOI,CAAM,EAIlD,OAAAE,EAAA,IAACtB,EAAiB,SAAjB,CACC,MAAO,CAAE,UAAAM,EAAW,YAAAS,EAAa,eAAAI,EAAgB,WAAAE,CAAW,EAE3D,SAAAhB,CAAA,CAAA,CAGP"}